{"version":3,"file":"memory-helper.js","names":["_arrayPushAtSortPosition","require","_rxError","_binarySearchBounds","getMemoryCollectionKey","databaseName","collectionName","schemaVersion","join","ensureNotRemoved","instance","internals","removed","Error","attachmentMapKey","documentId","attachmentId","sortByIndexStringComparator","a","b","putWriteRowToState","docId","state","stateByIndex","document","docInState","documents","set","i","length","byIndex","docsWithIndex","getIndexableString","newIndexString","insertPosition","pushAtSortPosition","previousIndexString","prev","splice","next","newRxError","args","indexBefore","boundEQ","compareDocsWithIndex","removeDocFromState","primaryPath","schema","doc","delete","Object","values","forEach","indexString","positionInIndex","indexStringA","indexStringB"],"sources":["../../../../src/plugins/storage-memory/memory-helper.ts"],"sourcesContent":["import type {\n    BulkWriteRow,\n    RxDocumentData,\n    RxJsonSchema\n} from '../../types/index.d.ts';\nimport type {\n    DocWithIndexString,\n    MemoryStorageInternals,\n    MemoryStorageInternalsByIndex\n} from './memory-types.ts';\nimport type { RxStorageInstanceMemory } from './rx-storage-instance-memory.ts';\nimport {\n    pushAtSortPosition\n} from 'array-push-at-sort-position';\nimport { newRxError } from '../../rx-error.ts';\nimport { boundEQ } from './binary-search-bounds.ts';\n\n\nexport function getMemoryCollectionKey(\n    databaseName: string,\n    collectionName: string,\n    schemaVersion: number\n): string {\n    return [\n        databaseName,\n        collectionName,\n        schemaVersion\n    ].join('--memory--');\n}\n\n\nexport function ensureNotRemoved(\n    instance: RxStorageInstanceMemory<any>\n) {\n    if (instance.internals.removed) {\n        throw new Error('removed');\n    }\n}\n\nexport function attachmentMapKey(documentId: string, attachmentId: string): string {\n    return documentId + '||' + attachmentId;\n}\n\n\nfunction sortByIndexStringComparator<RxDocType>(a: DocWithIndexString<RxDocType>, b: DocWithIndexString<RxDocType>) {\n    if (a[0] < b[0]) {\n        return -1;\n    } else {\n        return 1;\n    }\n}\n\n\n\n/**\n * @hotPath\n */\nexport function putWriteRowToState<RxDocType>(\n    docId: string,\n    state: MemoryStorageInternals<RxDocType>,\n    stateByIndex: MemoryStorageInternalsByIndex<RxDocType>[],\n    document: RxDocumentData<RxDocType>,\n    docInState?: RxDocumentData<RxDocType>\n) {\n    state.documents.set(docId, document as any);\n    for (let i = 0; i < stateByIndex.length; ++i) {\n        const byIndex = stateByIndex[i];\n        const docsWithIndex = byIndex.docsWithIndex;\n        const getIndexableString = byIndex.getIndexableString;\n        const newIndexString = getIndexableString(document as any);\n        const insertPosition = pushAtSortPosition(\n            docsWithIndex,\n            [\n                newIndexString,\n                document,\n                docId,\n            ],\n            sortByIndexStringComparator,\n            0\n        );\n\n        /**\n         * Remove previous if it was in the state\n         */\n        if (docInState) {\n            const previousIndexString = getIndexableString(docInState);\n            if (previousIndexString === newIndexString) {\n                /**\n                 * Performance shortcut.\n                 * If index was not changed -> The old doc must be before or after the new one.\n                 */\n                const prev = docsWithIndex[insertPosition - 1];\n                if (prev && prev[2] === docId) {\n                    docsWithIndex.splice(insertPosition - 1, 1);\n                } else {\n                    const next = docsWithIndex[insertPosition + 1];\n                    if (next[2] === docId) {\n                        docsWithIndex.splice(insertPosition + 1, 1);\n                    } else {\n                        throw newRxError('SNH', {\n                            document,\n                            args: {\n                                byIndex\n                            }\n                        });\n                    }\n                }\n            } else {\n                /**\n                 * Index changed, we must search for the old one and remove it.\n                 */\n                const indexBefore = boundEQ(\n                    docsWithIndex,\n                    [\n                        previousIndexString\n                    ] as any,\n                    compareDocsWithIndex\n                );\n                docsWithIndex.splice(indexBefore, 1);\n            }\n        }\n    }\n}\n\n\nexport function removeDocFromState<RxDocType>(\n    primaryPath: string,\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    state: MemoryStorageInternals<RxDocType>,\n    doc: RxDocumentData<RxDocType>\n) {\n    const docId: string = (doc as any)[primaryPath];\n    state.documents.delete(docId);\n\n    Object.values(state.byIndex).forEach(byIndex => {\n        const docsWithIndex = byIndex.docsWithIndex;\n        const indexString = byIndex.getIndexableString(doc);\n\n        const positionInIndex = boundEQ(\n            docsWithIndex,\n            [\n                indexString\n            ] as any,\n            compareDocsWithIndex\n        );\n        docsWithIndex.splice(positionInIndex, 1);\n    });\n}\n\n\nexport function compareDocsWithIndex<RxDocType>(\n    a: DocWithIndexString<RxDocType>,\n    b: DocWithIndexString<RxDocType>\n): 1 | 0 | -1 {\n    const indexStringA = a[0];\n    const indexStringB = b[0];\n    if (indexStringA < indexStringB) {\n        return -1;\n    } else if (indexStringA === indexStringB) {\n        return 0;\n    } else {\n        return 1;\n    }\n}\n"],"mappings":"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","ignoreList":[]}