"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hydrateCustomError = exports.HydratingErrorFailed = void 0;
const defekt_1 = require("./defekt");
const Result_1 = require("./Result");
class HydratingErrorFailed extends (0, defekt_1.defekt)({ code: 'HydratingErrorFailed' }) {
}
exports.HydratingErrorFailed = HydratingErrorFailed;
const hydrateCustomError = function ({ rawEx, potentialErrorConstructors }) {
    if (typeof rawEx !== 'object' || rawEx === null) {
        return (0, Result_1.error)(new HydratingErrorFailed('The given error is not an object.'));
    }
    if (!('name' in rawEx)) {
        return (0, Result_1.error)(new HydratingErrorFailed('The given error is missing a name.'));
    }
    if (!('code' in rawEx)) {
        return (0, Result_1.error)(new HydratingErrorFailed('The given error is missing a code.'));
    }
    if (!('message' in rawEx)) {
        return (0, Result_1.error)(new HydratingErrorFailed('The given error is missing a message.'));
    }
    const ActualErrorConstructor = potentialErrorConstructors.find((errorContructor) => errorContructor.code === rawEx.code);
    if (ActualErrorConstructor === undefined) {
        return (0, Result_1.error)(new HydratingErrorFailed({
            message: 'Could not find an appropriate ErrorConstructor to hydrate the given error.',
            data: { code: rawEx.code }
        }));
    }
    const stack = rawEx === null || rawEx === void 0 ? void 0 : rawEx.stack;
    const data = rawEx === null || rawEx === void 0 ? void 0 : rawEx.data;
    const cause = rawEx === null || rawEx === void 0 ? void 0 : rawEx.cause;
    const hydratedError = new ActualErrorConstructor({ message: rawEx.message, cause, data });
    hydratedError.name = rawEx.name;
    hydratedError.stack = stack;
    return (0, Result_1.value)(hydratedError);
};
exports.hydrateCustomError = hydrateCustomError;
