{"version":3,"file":"rx-storage-instance-memory.js","names":["_rxjs","require","_customIndex","_rxSchemaHelper","_rxStorageHelper","_index","_binarySearchBounds","_memoryHelper","_memoryIndexes","_rxQueryHelper","OPEN_MEMORY_INSTANCES","exports","Set","RxStorageInstanceMemory","storage","databaseName","collectionName","schema","internals","options","settings","devMode","closed","categorizedByWriteInput","WeakMap","add","primaryPath","getPrimaryFieldOfPrimaryKey","primaryKey","_proto","prototype","bulkWrite","documentWrites","context","ensurePersistence","ensureNotRemoved","documentsById","documents","categorized","categorizeBulkWriteRows","error","errors","awaitMe","Promise","resolve","set","ensurePersistenceTask","ensurePersistenceIdlePromise","requestIdlePromiseNoQueue","then","undefined","eventBulk","events","length","lastState","ensureNotFalsy","newestRow","document","checkpoint","id","lwt","_meta","endTime","now","changes$","next","stateByIndex","Object","values","byIndex","bulkInsertDocs","i","writeRow","doc","docId","putWriteRowToState","bulkUpdateDocs","get","attachments","attachmentsMap","attachmentsAdd","forEach","attachment","attachmentMapKey","documentId","attachmentId","writeData","attachmentData","digest","attachmentsUpdate","attachmentsRemove","delete","findDocumentsById","docIds","withDeleted","ret","size","docInDb","_deleted","push","query","preparedQuery","queryPlan","skip","limit","Infinity","skipPlusLimit","queryMatcher","selectorSatisfiedByIndex","getQueryMatcher","queryPlanFields","index","mustManuallyResort","sortSatisfiedByIndex","lowerBound","startKeys","lowerBoundString","getStartIndexStringFromLowerBound","upperBound","endKeys","upperBoundString","getStartIndexStringFromUpperBound","indexName","getMemoryIndexName","Error","docsWithIndex","indexOfLower","inclusiveStart","boundGE","boundGT","compareDocsWithIndex","indexOfUpper","inclusiveEnd","boundLE","boundLT","rows","done","currentRow","currentDoc","sortComparator","getSortComparator","sort","slice","count","result","mode","cleanup","minimumDeletedTime","maxDeletionTime","removeDocFromState","PROMISE_RESOLVE_TRUE","getAttachmentData","key","data","changeStream","asObservable","remove","removed","collectionStates","getMemoryCollectionKey","version","close","PROMISE_RESOLVE_VOID","refCount","conflictResultionTasks","conflictResultionTasks$","resolveConflictResultionTask","_taskSolution","createMemoryStorageInstance","params","collectionKey","randomCouchString","Map","Subject","addIndexesToInternalsState","deepEqual","instance"],"sources":["../../../../src/plugins/storage-memory/rx-storage-instance-memory.ts"],"sourcesContent":["import {\n    Observable,\n    Subject\n} from 'rxjs';\nimport {\n    getStartIndexStringFromLowerBound,\n    getStartIndexStringFromUpperBound\n} from '../../custom-index.ts';\nimport { getPrimaryFieldOfPrimaryKey } from '../../rx-schema-helper.ts';\nimport {\n    categorizeBulkWriteRows\n} from '../../rx-storage-helper.ts';\nimport type {\n    BulkWriteRow,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    PreparedQuery,\n    QueryMatcher,\n    RxConflictResultionTask,\n    RxConflictResultionTaskSolution,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorageBulkWriteResponse,\n    RxStorageChangeEvent,\n    RxStorageCountResult,\n    RxStorageDefaultCheckpoint,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    RxStorageQueryResult,\n    StringKeys\n} from '../../types/index.d.ts';\nimport {\n    deepEqual,\n    ensureNotFalsy,\n    now,\n    PROMISE_RESOLVE_TRUE,\n    PROMISE_RESOLVE_VOID,\n    randomCouchString,\n    requestIdlePromiseNoQueue\n} from '../../plugins/utils/index.ts';\nimport {\n    boundGE,\n    boundGT,\n    boundLE,\n    boundLT\n} from './binary-search-bounds.ts';\nimport {\n    attachmentMapKey,\n    compareDocsWithIndex,\n    ensureNotRemoved,\n    getMemoryCollectionKey,\n    putWriteRowToState,\n    removeDocFromState\n} from './memory-helper.ts';\nimport {\n    addIndexesToInternalsState,\n    getMemoryIndexName\n} from './memory-indexes.ts';\nimport type {\n    MemoryStorageInternals,\n    RxStorageMemory,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageMemorySettings\n} from './memory-types.ts';\nimport { getQueryMatcher, getSortComparator } from '../../rx-query-helper.ts';\n\n/**\n * Used in tests to ensure everything\n * is closed correctly\n */\nexport const OPEN_MEMORY_INSTANCES = new Set<RxStorageInstanceMemory<any>>();\n\nexport class RxStorageInstanceMemory<RxDocType> implements RxStorageInstance<\n    RxDocType,\n    MemoryStorageInternals<RxDocType>,\n    RxStorageMemoryInstanceCreationOptions,\n    RxStorageDefaultCheckpoint\n> {\n\n    public readonly primaryPath: StringKeys<RxDocumentData<RxDocType>>;\n    public closed = false;\n\n    /**\n     * Used by some plugins and storage wrappers\n     * to find out details about the internals of a write operation.\n     * For example if you want to know which documents really have been replaced\n     * or newly inserted.\n     */\n    public categorizedByWriteInput = new WeakMap<BulkWriteRow<RxDocType>[], CategorizeBulkWriteRowsOutput<RxDocType>>();\n\n    constructor(\n        public readonly storage: RxStorageMemory,\n        public readonly databaseName: string,\n        public readonly collectionName: string,\n        public readonly schema: Readonly<RxJsonSchema<RxDocumentData<RxDocType>>>,\n        public readonly internals: MemoryStorageInternals<RxDocType>,\n        public readonly options: Readonly<RxStorageMemoryInstanceCreationOptions>,\n        public readonly settings: RxStorageMemorySettings,\n        public readonly devMode: boolean\n    ) {\n        OPEN_MEMORY_INSTANCES.add(this);\n        this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\n    }\n\n    bulkWrite(\n        documentWrites: BulkWriteRow<RxDocType>[],\n        context: string\n    ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\n        this.ensurePersistence();\n        ensureNotRemoved(this);\n        const internals = this.internals;\n        const documentsById = this.internals.documents;\n        const primaryPath = this.primaryPath;\n\n\n        const categorized = categorizeBulkWriteRows<RxDocType>(\n            this,\n            primaryPath as any,\n            documentsById,\n            documentWrites,\n            context\n        );\n        const error = categorized.errors;\n        /**\n         * @performance\n         * We have to return a Promise but we do not want to wait\n         * one tick, so we directly create the promise\n         * which makes it likely to be already resolved later.\n         */\n        const awaitMe = Promise.resolve({ error });\n\n        this.categorizedByWriteInput.set(documentWrites, categorized);\n        this.internals.ensurePersistenceTask = categorized;\n\n        if (!this.internals.ensurePersistenceIdlePromise) {\n            this.internals.ensurePersistenceIdlePromise = requestIdlePromiseNoQueue().then(() => {\n                this.internals.ensurePersistenceIdlePromise = undefined;\n                this.ensurePersistence();\n            });\n        }\n\n        /**\n         * Important: The events must be emitted AFTER the persistence\n         * task has been added.\n         */\n        if (categorized.eventBulk.events.length > 0) {\n            const lastState = ensureNotFalsy(categorized.newestRow).document;\n            categorized.eventBulk.checkpoint = {\n                id: lastState[primaryPath],\n                lwt: lastState._meta.lwt\n            };\n            categorized.eventBulk.endTime = now();\n            internals.changes$.next(categorized.eventBulk);\n        }\n        return awaitMe;\n    }\n\n    /**\n     * Instead of directly inserting the documents into all indexes,\n     * we do it lazy in the background. This gives the application time\n     * to directly work with the write-result and to do stuff like rendering DOM\n     * notes and processing RxDB queries.\n     * Then in some later time, or just before the next read/write,\n     * it is ensured that the indexes have been written.\n     */\n    public ensurePersistence() {\n        if (\n            !this.internals.ensurePersistenceTask\n        ) {\n            return;\n        }\n        const internals = this.internals;\n        const documentsById = this.internals.documents;\n        const primaryPath = this.primaryPath;\n\n        const categorized = this.internals.ensurePersistenceTask;\n        this.internals.ensurePersistenceTask = undefined;\n\n        /**\n         * Do inserts/updates\n         */\n        const stateByIndex = Object.values(this.internals.byIndex);\n\n        const bulkInsertDocs = categorized.bulkInsertDocs;\n        for (let i = 0; i < bulkInsertDocs.length; ++i) {\n            const writeRow = bulkInsertDocs[i];\n            const doc = writeRow.document;\n            const docId = doc[primaryPath];\n            putWriteRowToState(\n                docId as any,\n                internals,\n                stateByIndex,\n                doc,\n                undefined\n            );\n        }\n\n        const bulkUpdateDocs = categorized.bulkUpdateDocs;\n        for (let i = 0; i < bulkUpdateDocs.length; ++i) {\n            const writeRow = bulkUpdateDocs[i];\n            const doc = writeRow.document;\n            const docId = doc[primaryPath];\n            putWriteRowToState(\n                docId as any,\n                internals,\n                stateByIndex,\n                doc,\n                documentsById.get(docId as any)\n            );\n        }\n\n        /**\n         * Handle attachments\n         */\n        if (this.schema.attachments) {\n            const attachmentsMap = internals.attachments;\n            categorized.attachmentsAdd.forEach(attachment => {\n                attachmentsMap.set(\n                    attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                    {\n                        writeData: attachment.attachmentData,\n                        digest: attachment.digest\n                    }\n                );\n            });\n            if (this.schema.attachments) {\n                categorized.attachmentsUpdate.forEach(attachment => {\n                    attachmentsMap.set(\n                        attachmentMapKey(attachment.documentId, attachment.attachmentId),\n                        {\n                            writeData: attachment.attachmentData,\n                            digest: attachment.digest\n                        }\n                    );\n                });\n                categorized.attachmentsRemove.forEach(attachment => {\n                    attachmentsMap.delete(\n                        attachmentMapKey(attachment.documentId, attachment.attachmentId)\n                    );\n                });\n            }\n        }\n    }\n\n    findDocumentsById(\n        docIds: string[],\n        withDeleted: boolean\n    ): Promise<RxDocumentData<RxDocType>[]> {\n        this.ensurePersistence();\n        const documentsById = this.internals.documents;\n        const ret: RxDocumentData<RxDocType>[] = [];\n        if (documentsById.size === 0) {\n            return Promise.resolve(ret);\n        }\n        for (let i = 0; i < docIds.length; ++i) {\n            const docId = docIds[i];\n            const docInDb = documentsById.get(docId);\n            if (\n                docInDb &&\n                (\n                    !docInDb._deleted ||\n                    withDeleted\n                )\n            ) {\n                ret.push(docInDb);\n            }\n        }\n        return Promise.resolve(ret);\n    }\n\n    query(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageQueryResult<RxDocType>> {\n        this.ensurePersistence();\n\n        const queryPlan = preparedQuery.queryPlan;\n        const query = preparedQuery.query;\n\n        const skip = query.skip ? query.skip : 0;\n        const limit = query.limit ? query.limit : Infinity;\n        const skipPlusLimit = skip + limit;\n\n        let queryMatcher: QueryMatcher<RxDocumentData<RxDocType>> | false = false;\n        if (!queryPlan.selectorSatisfiedByIndex) {\n            queryMatcher = getQueryMatcher(\n                this.schema,\n                preparedQuery.query\n            );\n        }\n\n        const queryPlanFields: string[] = queryPlan.index;\n        const mustManuallyResort = !queryPlan.sortSatisfiedByIndex;\n        const index: string[] | undefined = queryPlanFields;\n        const lowerBound: any[] = queryPlan.startKeys;\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            lowerBound\n        );\n\n        let upperBound: any[] = queryPlan.endKeys;\n        upperBound = upperBound;\n        const upperBoundString = getStartIndexStringFromUpperBound(\n            this.schema,\n            index,\n            upperBound\n        );\n        const indexName = getMemoryIndexName(index);\n\n        if (!this.internals.byIndex[indexName]) {\n            throw new Error('index does not exist ' + indexName);\n        }\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n\n\n        let indexOfLower = (queryPlan.inclusiveStart ? boundGE : boundGT)(\n            docsWithIndex,\n            [\n                lowerBoundString\n            ] as any,\n            compareDocsWithIndex\n        );\n\n        const indexOfUpper = (queryPlan.inclusiveEnd ? boundLE : boundLT)(\n            docsWithIndex,\n            [\n                upperBoundString\n            ] as any,\n            compareDocsWithIndex\n        );\n\n        let rows: RxDocumentData<RxDocType>[] = [];\n        let done = false;\n        while (!done) {\n            const currentRow = docsWithIndex[indexOfLower];\n            if (\n                !currentRow ||\n                indexOfLower > indexOfUpper\n            ) {\n                break;\n            }\n            const currentDoc = currentRow[1];\n\n            if (!queryMatcher || queryMatcher(currentDoc)) {\n                rows.push(currentDoc);\n            }\n\n            if (\n                (rows.length >= skipPlusLimit && !mustManuallyResort)\n            ) {\n                done = true;\n            }\n\n            indexOfLower++;\n        }\n\n        if (mustManuallyResort) {\n            const sortComparator = getSortComparator(this.schema, preparedQuery.query);\n            rows = rows.sort(sortComparator);\n        }\n\n        // apply skip and limit boundaries.\n        rows = rows.slice(skip, skipPlusLimit);\n        return Promise.resolve({\n            documents: rows\n        });\n    }\n\n    async count(\n        preparedQuery: PreparedQuery<RxDocType>\n    ): Promise<RxStorageCountResult> {\n        this.ensurePersistence();\n        const result = await this.query(preparedQuery);\n        return {\n            count: result.documents.length,\n            mode: 'fast'\n        };\n    }\n\n    cleanup(minimumDeletedTime: number): Promise<boolean> {\n        this.ensurePersistence();\n        const maxDeletionTime = now() - minimumDeletedTime;\n        const index = ['_deleted', '_meta.lwt', this.primaryPath as any];\n        const indexName = getMemoryIndexName(index);\n        const docsWithIndex = this.internals.byIndex[indexName].docsWithIndex;\n\n        const lowerBoundString = getStartIndexStringFromLowerBound(\n            this.schema,\n            index,\n            [\n                true,\n                0,\n                ''\n            ]\n        );\n\n        let indexOfLower = boundGT(\n            docsWithIndex,\n            [\n                lowerBoundString\n            ] as any,\n            compareDocsWithIndex\n        );\n\n        let done = false;\n        while (!done) {\n            const currentDoc = docsWithIndex[indexOfLower];\n            if (!currentDoc || currentDoc[1]._meta.lwt > maxDeletionTime) {\n                done = true;\n            } else {\n                removeDocFromState(\n                    this.primaryPath as any,\n                    this.schema,\n                    this.internals,\n                    currentDoc[1]\n                );\n                indexOfLower++;\n            }\n        }\n        return PROMISE_RESOLVE_TRUE;\n    }\n\n    getAttachmentData(\n        documentId: string,\n        attachmentId: string,\n        digest: string\n    ): Promise<string> {\n        this.ensurePersistence();\n        ensureNotRemoved(this);\n        const key = attachmentMapKey(documentId, attachmentId);\n        const data = this.internals.attachments.get(key);\n\n        if (\n            !digest ||\n            !data ||\n            data.digest !== digest\n        ) {\n            throw new Error('attachment does not exist: ' + key);\n        }\n        return Promise.resolve(data.writeData.data);\n    }\n\n    changeStream(): Observable<EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, RxStorageDefaultCheckpoint>> {\n        ensureNotRemoved(this);\n        return this.internals.changes$.asObservable();\n    }\n\n    async remove(): Promise<void> {\n        if (this.closed) {\n            throw new Error('closed');\n        }\n        this.ensurePersistence();\n        ensureNotRemoved(this);\n\n        this.internals.removed = true;\n        this.storage.collectionStates.delete(\n            getMemoryCollectionKey(\n                this.databaseName,\n                this.collectionName,\n                this.schema.version\n            )\n        );\n        await this.close();\n    }\n\n    close(): Promise<void> {\n        OPEN_MEMORY_INSTANCES.delete(this);\n\n        this.ensurePersistence();\n        if (this.closed) {\n            return PROMISE_RESOLVE_VOID;\n        }\n        this.closed = true;\n\n        this.internals.refCount = this.internals.refCount - 1;\n        return PROMISE_RESOLVE_VOID;\n    }\n\n    conflictResultionTasks(): Observable<RxConflictResultionTask<RxDocType>> {\n        return this.internals.conflictResultionTasks$.asObservable();\n    }\n    resolveConflictResultionTask(_taskSolution: RxConflictResultionTaskSolution<RxDocType>): Promise<void> {\n        return PROMISE_RESOLVE_VOID;\n    }\n}\n\nexport function createMemoryStorageInstance<RxDocType>(\n    storage: RxStorageMemory,\n    params: RxStorageInstanceCreationParams<RxDocType, RxStorageMemoryInstanceCreationOptions>,\n    settings: RxStorageMemorySettings\n): Promise<RxStorageInstanceMemory<RxDocType>> {\n    const collectionKey = getMemoryCollectionKey(\n        params.databaseName,\n        params.collectionName,\n        params.schema.version\n    );\n\n    let internals = storage.collectionStates.get(collectionKey);\n    if (!internals) {\n        internals = {\n            id: randomCouchString(5),\n            schema: params.schema,\n            removed: false,\n            refCount: 1,\n            documents: new Map(),\n            attachments: params.schema.attachments ? new Map() : undefined as any,\n            byIndex: {},\n            conflictResultionTasks$: new Subject(),\n            changes$: new Subject()\n        };\n        addIndexesToInternalsState(internals, params.schema);\n        storage.collectionStates.set(collectionKey, internals);\n    } else {\n        /**\n         * Ensure that the storage was not already\n         * created with a different schema.\n         * This is very important because if this check\n         * does not exist here, we have hard-to-debug problems\n         * downstream.\n         */\n        if (\n            params.devMode &&\n            !deepEqual(internals.schema, params.schema)\n        ) {\n            throw new Error('storage was already created with a different schema');\n        }\n        internals.refCount = internals.refCount + 1;\n    }\n\n    const instance = new RxStorageInstanceMemory(\n        storage,\n        params.databaseName,\n        params.collectionName,\n        params.schema,\n        internals,\n        params.options,\n        settings,\n        params.devMode\n    );\n    return Promise.resolve(instance);\n}\n"],"mappings":"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","ignoreList":[]}