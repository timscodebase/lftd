{"version":3,"file":"utils-revision.js","names":["parseRevision","revision","split","length","Error","height","parseInt","hash","getHeightOfRevision","useChars","index","char","createRevision","databaseInstanceToken","previousDocData","newRevisionHeight","_rev"],"sources":["../../../../src/plugins/utils/utils-revision.ts"],"sourcesContent":["import type {\n    RxDocumentData\n} from '../../types/index.d.ts';\n\n/**\n * Parses the full revision.\n * Do NOT use this if you only need the revision height,\n * then use getHeightOfRevision() instead which is faster.\n */\nexport function parseRevision(revision: string): { height: number; hash: string; } {\n    const split = revision.split('-');\n    if (split.length !== 2) {\n        throw new Error('malformatted revision: ' + revision);\n    }\n    return {\n        height: parseInt(split[0], 10),\n        hash: split[1]\n    };\n}\n\n/**\n * @hotPath Performance is very important here\n * because we need to parse the revision height very often.\n * Do not use `parseInt(revision.split('-')[0], 10)` because\n * only fetching the start-number chars is faster.\n */\nexport function getHeightOfRevision(revision: string): number {\n    let useChars = '';\n    for (let index = 0; index < revision.length; index++) {\n        const char = revision[index];\n        if (char === '-') {\n            return parseInt(useChars, 10);\n        }\n        useChars += char;\n    }\n    throw new Error('malformatted revision: ' + revision);\n}\n\n\n/**\n * Creates the next write revision for a given document.\n */\nexport function createRevision<RxDocType>(\n    databaseInstanceToken: string,\n    previousDocData?: RxDocumentData<RxDocType>\n): string {\n    const newRevisionHeight = !previousDocData ? 1 : getHeightOfRevision(previousDocData._rev) + 1\n    return newRevisionHeight + '-' + databaseInstanceToken;\n}\n\n"],"mappings":";;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACO,SAASA,aAAaA,CAACC,QAAgB,EAAqC;EAC/E,IAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;EACjC,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;IACpB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,GAAGH,QAAQ,CAAC;EACzD;EACA,OAAO;IACHI,MAAM,EAAEC,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC9BK,IAAI,EAAEL,KAAK,CAAC,CAAC;EACjB,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASM,mBAAmBA,CAACP,QAAgB,EAAU;EAC1D,IAAIQ,QAAQ,GAAG,EAAE;EACjB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGT,QAAQ,CAACE,MAAM,EAAEO,KAAK,EAAE,EAAE;IAClD,IAAMC,IAAI,GAAGV,QAAQ,CAACS,KAAK,CAAC;IAC5B,IAAIC,IAAI,KAAK,GAAG,EAAE;MACd,OAAOL,QAAQ,CAACG,QAAQ,EAAE,EAAE,CAAC;IACjC;IACAA,QAAQ,IAAIE,IAAI;EACpB;EACA,MAAM,IAAIP,KAAK,CAAC,yBAAyB,GAAGH,QAAQ,CAAC;AACzD;;AAGA;AACA;AACA;AACO,SAASW,cAAcA,CAC1BC,qBAA6B,EAC7BC,eAA2C,EACrC;EACN,IAAMC,iBAAiB,GAAG,CAACD,eAAe,GAAG,CAAC,GAAGN,mBAAmB,CAACM,eAAe,CAACE,IAAI,CAAC,GAAG,CAAC;EAC9F,OAAOD,iBAAiB,GAAG,GAAG,GAAGF,qBAAqB;AAC1D","ignoreList":[]}