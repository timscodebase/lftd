{"version":3,"file":"rx-storage-helper.js","names":["overwritable","newRxError","getPrimaryFieldOfPrimaryKey","PROMISE_RESOLVE_TRUE","RXDB_VERSION","RX_META_LWT_MINIMUM","appendToArray","createRevision","ensureNotFalsy","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","lastOfArray","now","promiseWait","randomCouchString","filter","map","startWith","switchMap","prepareQuery","normalizeMangoQuery","runPluginHooks","INTERNAL_STORAGE_NAME","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","getSingleDocument","storageInstance","documentId","results","findDocumentsById","doc","undefined","writeSingle","instance","writeRow","context","writeResult","bulkWrite","error","length","primaryPath","schema","primaryKey","success","getWrittenDocumentsFromBulkWriteResponse","ret","observeSingle","firstFindPromise","changeStream","pipe","evBulk","events","find","ev","Promise","resolve","documentData","v","stackCheckpoints","checkpoints","Object","assign","throwIfIsStorageWriteError","collection","writeData","status","name","id","writeError","data","categorizeBulkWriteRows","docsInDb","bulkWriteRows","onInsert","onUpdate","hasAttachments","attachments","bulkInsertDocs","bulkUpdateDocs","errors","eventBulkId","eventBulk","checkpoint","startTime","endTime","eventBulkEvents","attachmentsAdd","attachmentsRemove","attachmentsUpdate","hasDocsInDb","size","newestRow","rowAmount","_loop","rowId","document","previous","docId","documentDeleted","_deleted","previousDeleted","documentInDb","get","attachmentError","insertedIsDeleted","entries","_attachments","forEach","attachmentId","attachmentData","isError","push","digest","stripAttachmentsDataFromRow","event","operation","stripAttachmentsDataFromDocument","previousDocumentData","revInDb","_rev","err","updatedRow","keys","previousAttachmentData","newDigest","eventDocumentData","previousEventDocumentData","args","getAttachmentSize","attachmentBase64String","atob","attachmentWriteDataToNormalData","type","useDoc","flatCloneDocWithMeta","_meta","BULK_WRITE_SUCCESS_MAP","WeakMap","getWrappedStorageInstance","database","rxJsonSchema","deepFreezeWhenDevMode","originalStorageInstance","internals","collectionName","databaseName","options","rows","databaseToken","token","toStorageWriteRows","Array","time","index","lwt","lockedRun","then","useWriteResult","successArray","set","reInsertErrors","reInserts","subResult","subSuccess","query","preparedQuery","count","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","storageInstances","delete","close","conflictResultionTasks","resolveConflictResultionTask","taskSolution","output","isEqual","add","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","compression","jsonSchema","encrypted","getChangedDocumentsSinceQuery","sinceLwt","sinceId","selector","$or","$gt","$eq","$gte","sort","skip","result","documents","lastDoc","writeRows","response","fromMap","errorIds","Set","has","randomDelayStorage","input","randomDelayStorageWriteQueue","retStorage","storage","rxdbVersion","createStorageInstance","delayTimeBefore","delayTimeAfter","a","b","c"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable.ts';\nimport { newRxError } from './rx-error.ts';\nimport {\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper.ts';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowProcessed,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    StringKeys,\n    RxStorageWriteErrorConflict,\n    RxStorageWriteErrorAttachment,\n    RxStorage,\n    RxStorageDefaultCheckpoint,\n    FilledMangoQuery,\n    RxStorageBulkWriteResponse\n} from './types/index.d.ts';\nimport {\n    PROMISE_RESOLVE_TRUE,\n    RXDB_VERSION,\n    RX_META_LWT_MINIMUM,\n    appendToArray,\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    lastOfArray,\n    now,\n    promiseWait,\n    randomCouchString\n} from './plugins/utils/index.ts';\nimport { Observable, filter, map, startWith, switchMap } from 'rxjs';\nimport { prepareQuery } from './rx-query.ts';\nimport { normalizeMangoQuery } from './rx-query-helper.ts';\nimport { runPluginHooks } from './hooks.ts';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | undefined> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[0];\n    if (doc) {\n        return doc;\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n    if (writeResult.error.length > 0) {\n        const error = writeResult.error[0];\n        throw error;\n    } else {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(instance.schema.primaryKey);\n        const success = getWrittenDocumentsFromBulkWriteResponse(primaryPath, [writeRow], writeResult);\n        const ret = success[0];\n        return ret;\n    }\n}\n\n/**\n * Observe the plain document data of a single document.\n * Do not forget to unsubscribe.\n */\nexport function observeSingle<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Observable<RxDocumentData<RxDocType>> {\n    const firstFindPromise = getSingleDocument(storageInstance, documentId);\n    const ret = storageInstance\n        .changeStream()\n        .pipe(\n            map(evBulk => evBulk.events.find(ev => ev.documentId === documentId)),\n            filter(ev => !!ev),\n            map(ev => Promise.resolve(ensureNotFalsy(ev).documentData)),\n            startWith(firstFindPromise),\n            switchMap(v => v),\n            filter(v => !!v)\n        ) as any;\n    return ret;\n}\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: CheckpointType[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints\n    );\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType, any, any>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('CONFLICT', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else if (error.status === 422) {\n            throw newRxError('VD2', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n * @hotPath The performance of this function is critical\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     * This must be a Map for better performance.\n     */\n    docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string,\n    /**\n     * Used by some storages for better performance.\n     * For example when get-by-id and insert/update can run in parallel.\n     */\n    onInsert?: (docData: RxDocumentData<RxDocType>) => void,\n    onUpdate?: (docData: RxDocumentData<RxDocType>) => void\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const errors: RxStorageWriteError<RxDocType>[] = [];\n    const eventBulkId = randomCouchString(10);\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: eventBulkId,\n        events: [],\n        checkpoint: null,\n        context,\n        startTime: now(),\n        endTime: 0\n    };\n    const eventBulkEvents = eventBulk.events;\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n        digest: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n\n    const hasDocsInDb = docsInDb.size > 0;\n    let newestRow: BulkWriteRowProcessed<RxDocType> | undefined;\n\n    /**\n     * @performance is really important in this loop!\n     */\n    const rowAmount = bulkWriteRows.length;\n    for (let rowId = 0; rowId < rowAmount; rowId++) {\n        const writeRow = bulkWriteRows[rowId];\n\n        // use these variables to have less property accesses\n        const document = writeRow.document;\n        const previous = writeRow.previous;\n        const docId = document[primaryPath] as string;\n        const documentDeleted = document._deleted;\n        const previousDeleted = previous && previous._deleted;\n\n        let documentInDb: RxDocumentData<RxDocType> | undefined = undefined as any;\n        if (hasDocsInDb) {\n            documentInDb = docsInDb.get(docId);\n        }\n        let attachmentError: RxStorageWriteErrorAttachment<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = documentDeleted ? true : false;\n            if (hasAttachments) {\n                Object\n                    .entries(document._attachments)\n                    .forEach(([attachmentId, attachmentData]) => {\n                        if (\n                            !(attachmentData as RxAttachmentWriteData).data\n                        ) {\n                            attachmentError = {\n                                documentId: docId,\n                                isError: true,\n                                status: 510,\n                                writeRow,\n                                attachmentId\n                            };\n                            errors.push(attachmentError);\n                        } else {\n                            attachmentsAdd.push({\n                                documentId: docId,\n                                attachmentId,\n                                attachmentData: attachmentData as any,\n                                digest: attachmentData.digest\n                            });\n                        }\n                    });\n            }\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                    if (onInsert) {\n                        onInsert(document);\n                    }\n                } else {\n                    bulkInsertDocs.push(writeRow as any);\n                    if (onInsert) {\n                        onInsert(document);\n                    }\n                }\n\n                newestRow = writeRow as any;\n            }\n\n            if (!insertedIsDeleted) {\n                const event = {\n                    documentId: docId,\n                    operation: 'INSERT' as const,\n                    documentData: hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any,\n                    previousDocumentData: hasAttachments && previous ? stripAttachmentsDataFromDocument(previous) : previous as any\n                };\n                eventBulkEvents.push(event);\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !previous\n                ) ||\n                (\n                    !!previous &&\n                    revInDb !== previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: docId,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors.push(err);\n                continue;\n            }\n\n            // handle attachments data\n\n            const updatedRow: BulkWriteRowProcessed<RxDocType> = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow as any;\n            if (hasAttachments) {\n                if (documentDeleted) {\n                    /**\n                     * Deleted documents must have cleared all their attachments.\n                     */\n                    if (previous) {\n                        Object\n                            .keys(previous._attachments)\n                            .forEach(attachmentId => {\n                                attachmentsRemove.push({\n                                    documentId: docId,\n                                    attachmentId,\n                                    digest: ensureNotFalsy(previous)._attachments[attachmentId].digest\n                                });\n                            });\n                    }\n                } else {\n                    // first check for errors\n                    Object\n                        .entries(document._attachments)\n                        .find(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\n                            if (\n                                !previousAttachmentData &&\n                                !(attachmentData as RxAttachmentWriteData).data\n                            ) {\n                                attachmentError = {\n                                    documentId: docId,\n                                    documentInDb: documentInDb as any,\n                                    isError: true,\n                                    status: 510,\n                                    writeRow,\n                                    attachmentId\n                                };\n                            }\n                            return true;\n                        });\n                    if (!attachmentError) {\n                        Object\n                            .entries(document._attachments)\n                            .forEach(([attachmentId, attachmentData]) => {\n                                const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\n                                if (!previousAttachmentData) {\n                                    attachmentsAdd.push({\n                                        documentId: docId,\n                                        attachmentId,\n                                        attachmentData: attachmentData as any,\n                                        digest: attachmentData.digest\n                                    });\n                                } else {\n                                    const newDigest = updatedRow.document._attachments[attachmentId].digest;\n                                    if (\n                                        (attachmentData as RxAttachmentWriteData).data &&\n                                        /**\n                                         * Performance shortcut,\n                                         * do not update the attachment data if it did not change.\n                                         */\n                                        previousAttachmentData.digest !== newDigest\n                                    ) {\n                                        attachmentsUpdate.push({\n                                            documentId: docId,\n                                            attachmentId,\n                                            attachmentData: attachmentData as RxAttachmentWriteData,\n                                            digest: attachmentData.digest\n                                        });\n                                    }\n                                }\n                            });\n                    }\n                }\n            }\n\n            if (attachmentError) {\n                errors.push(attachmentError);\n            } else {\n                if (hasAttachments) {\n                    bulkUpdateDocs.push(stripAttachmentsDataFromRow(updatedRow));\n                    if (onUpdate) {\n                        onUpdate(document);\n                    }\n                } else {\n                    bulkUpdateDocs.push(updatedRow);\n                    if (onUpdate) {\n                        onUpdate(document);\n                    }\n                }\n                newestRow = updatedRow as any;\n            }\n\n            let eventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let previousEventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let operation: 'INSERT' | 'UPDATE' | 'DELETE' = null as any;\n\n            if (previousDeleted && !documentDeleted) {\n                operation = 'INSERT';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\n            } else if (previous && !previousDeleted && !documentDeleted) {\n                operation = 'UPDATE';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\n                previousEventDocumentData = previous;\n            } else if (documentDeleted) {\n                operation = 'DELETE';\n                eventDocumentData = ensureNotFalsy(document) as any;\n                previousEventDocumentData = previous;\n            } else {\n                throw newRxError('SNH', { args: { writeRow } });\n            }\n\n            const event = {\n                documentId: docId,\n                documentData: eventDocumentData as RxDocumentData<RxDocType>,\n                previousDocumentData: previousEventDocumentData,\n                operation: operation\n            };\n            eventBulkEvents.push(event);\n        }\n    }\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        newestRow,\n        errors,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRowProcessed<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\n\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Used in custom RxStorage implementations.\n */\nexport function attachmentWriteDataToNormalData(writeData: RxAttachmentData | RxAttachmentWriteData): RxAttachmentData {\n    const data = (writeData as RxAttachmentWriteData).data;\n    if (!data) {\n        return writeData as any;\n    }\n    const ret: RxAttachmentData = {\n        length: getAttachmentSize(data),\n        digest: writeData.digest,\n        type: writeData.type\n    };\n    return ret;\n}\n\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    if (!doc._attachments || Object.keys(doc._attachments).length === 0) {\n        return doc;\n    }\n\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc) as any;\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\n        });\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    return Object.assign(\n        {},\n        doc,\n        {\n            _meta: flatClone(doc._meta)\n        }\n    );\n}\n\nexport type WrappedRxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> = RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> & {\n    originalStorageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>;\n};\n\n\nconst BULK_WRITE_SUCCESS_MAP = new WeakMap<RxStorageBulkWriteResponse<any>, RxDocumentData<any>>();\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions, any>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\n\n    const ret: WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        originalStorageInstance: storageInstance,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const databaseToken = database.token;\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = new Array(rows.length);\n            /**\n             * Use the same timestamp for all docs of this rows-set.\n             * This improves performance because calling Date.now() inside of the now() function\n             * is too costly.\n             */\n            const time = now();\n            for (let index = 0; index < rows.length; index++) {\n                const writeRow = rows[index];\n                const document = flatCloneDocWithMeta(writeRow.document);\n                document._meta.lwt = time;\n\n                /**\n                 * Yes we really want to set the revision here.\n                 * If you make a plugin that relies on having its own revision\n                 * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n                 */\n                const previous = writeRow.previous;\n                document._rev = createRevision(\n                    databaseToken,\n                    previous\n                );\n                toStorageWriteRows[index] = {\n                    document,\n                    previous\n                };\n            }\n\n            runPluginHooks('preStorageWrite', {\n                storageInstance: this.originalStorageInstance,\n                rows: toStorageWriteRows\n            });\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const useWriteResult: typeof writeResult = {\n                        error: []\n                    };\n\n                    /**\n                     * TODO do we really have to build up the successArray\n                     * here directly? Maybe we only need it when it is really accessed.\n                     */\n                    const successArray = getWrittenDocumentsFromBulkWriteResponse(\n                        primaryPath,\n                        toStorageWriteRows,\n                        writeResult\n                    );\n                    BULK_WRITE_SUCCESS_MAP.set(useWriteResult, successArray);\n\n                    const reInsertErrors: RxStorageWriteErrorConflict<RxDocType>[] = writeResult.error.length === 0\n                        ? []\n                        : writeResult.error\n                            .filter((error) => {\n                                if (\n                                    error.status === 409 &&\n                                    !error.writeRow.previous &&\n                                    !error.writeRow.document._deleted &&\n                                    ensureNotFalsy(error.documentInDb)._deleted\n                                ) {\n                                    return true;\n                                }\n\n                                // add the \"normal\" errors to the parent error array.\n                                useWriteResult.error.push(error);\n                                return false;\n                            }) as any;\n                    if (reInsertErrors.length > 0) {\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(\n                                                database.token,\n                                                error.documentInDb\n                                            )\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            appendToArray(useWriteResult.error, subResult.error);\n\n                            const subSuccess = getWrittenDocumentsFromBulkWriteResponse(\n                                primaryPath,\n                                reInserts,\n                                subResult\n                            );\n                            appendToArray(successArray, subSuccess);\n\n                            return useWriteResult;\n                        });\n                    }\n                    return useWriteResult;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            );\n        },\n        count(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.count(preparedQuery)\n            );\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            );\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string,\n            digest: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId, digest)\n            );\n        },\n        getChangedDocumentsSince: !storageInstance.getChangedDocumentsSince ? undefined : (limit: number, checkpoint?: any) => {\n            return database.lockedRun(\n                () => ((storageInstance as any).getChangedDocumentsSince)(ensureNotFalsy(limit), checkpoint)\n            );\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream();\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask(taskSolution) {\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const doc = Object.assign(\n                {},\n                taskSolution.output.documentData,\n                {\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                }\n            );\n\n            const documentData = flatClone(doc);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n\n    database.storageInstances.add(ret);\n    return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(\n    params: RxStorageInstanceCreationParams<any, any>\n) {\n    if (params.schema.keyCompression) {\n        throw newRxError('UT5', { args: { params } });\n    }\n    if (hasEncryption(params.schema)) {\n        throw newRxError('UT6', { args: { params } });\n    }\n    if (\n        params.schema.attachments &&\n        params.schema.attachments.compression\n    ) {\n        throw newRxError('UT7', { args: { params } });\n    }\n}\n\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\n    if (\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport function getChangedDocumentsSinceQuery<RxDocType, CheckpointType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any, CheckpointType>,\n    limit: number,\n    checkpoint?: CheckpointType\n): FilledMangoQuery<RxDocType> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\n    const sinceLwt = checkpoint ? (checkpoint as unknown as RxStorageDefaultCheckpoint).lwt : RX_META_LWT_MINIMUM;\n    const sinceId = checkpoint ? (checkpoint as unknown as RxStorageDefaultCheckpoint).id : '';\n    return normalizeMangoQuery(storageInstance.schema, {\n        selector: {\n            $or: [\n                {\n                    '_meta.lwt': {\n                        $gt: sinceLwt\n                    }\n                },\n                {\n                    '_meta.lwt': {\n                        $eq: sinceLwt\n                    },\n                    [primaryPath]: {\n                        $gt: checkpoint ? sinceId : ''\n                    }\n                }\n            ],\n            // add this hint for better index usage\n            '_meta.lwt': {\n                $gte: sinceLwt\n            }\n        } as any,\n        sort: [\n            { '_meta.lwt': 'asc' },\n            { [primaryPath]: 'asc' }\n        ] as any,\n        skip: 0,\n        limit,\n        /**\n         * DO NOT SET A SPECIFIC INDEX HERE!\n         * The query might be modified by some plugin\n         * before sending it to the storage.\n         * We can be sure that in the end the query planner\n         * will find the best index.\n         */\n        // index: ['_meta.lwt', primaryPath]\n    });\n}\n\nexport async function getChangedDocumentsSince<RxDocType, CheckpointType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any, CheckpointType>,\n    limit: number,\n    checkpoint?: CheckpointType\n): Promise<{\n    documents: RxDocumentData<RxDocType>[];\n    /**\n     * The checkpoint contains data so that another\n     * call to getChangedDocumentsSince() will continue\n     * from exactly the last document that was returned before.\n     */\n    checkpoint: CheckpointType;\n}> {\n    if (storageInstance.getChangedDocumentsSince) {\n        return storageInstance.getChangedDocumentsSince(limit, checkpoint);\n    }\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\n    const query = prepareQuery<RxDocumentData<any>>(\n        storageInstance.schema,\n        getChangedDocumentsSinceQuery(\n            storageInstance,\n            limit,\n            checkpoint\n        )\n    );\n\n    const result = await storageInstance.query(query);\n    const documents = result.documents;\n    const lastDoc = lastOfArray(documents);\n\n    return {\n        documents: documents,\n        checkpoint: lastDoc ? {\n            id: (lastDoc as any)[primaryPath],\n            lwt: lastDoc._meta.lwt\n        } as any : checkpoint ? checkpoint : {\n            id: '',\n            lwt: 0\n        }\n    };\n}\n\n\nexport function getWrittenDocumentsFromBulkWriteResponse<RxDocType>(\n    primaryPath: string,\n    writeRows: BulkWriteRow<RxDocType>[],\n    response: RxStorageBulkWriteResponse<RxDocType>\n): RxDocumentData<RxDocType>[] {\n    const fromMap = BULK_WRITE_SUCCESS_MAP.get(response);\n    if (fromMap) {\n        return fromMap;\n    }\n\n    const ret: RxDocumentData<RxDocType>[] = [];\n    if (response.error.length > 0) {\n        const errorIds = new Set();\n        for (let index = 0; index < response.error.length; index++) {\n            const error = response.error[index];\n            errorIds.add(error.documentId);\n        }\n\n        for (let index = 0; index < writeRows.length; index++) {\n            const doc = writeRows[index].document;\n            if (!errorIds.has((doc as any)[primaryPath])) {\n                ret.push(stripAttachmentsDataFromDocument(doc));\n            }\n        }\n    } else {\n        // pre-set array size for better performance\n        ret.length = writeRows.length - response.error.length;\n        for (let index = 0; index < writeRows.length; index++) {\n            const doc = writeRows[index].document;\n            ret[index] = stripAttachmentsDataFromDocument(doc);\n        }\n    }\n\n    return ret;\n}\n\n\n/**\n * Wraps the storage and simluates\n * delays. Mostly used in tests.\n */\nexport function randomDelayStorage<Internals, InstanceCreationOptions>(\n    input: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n        delayTimeBefore: () => number;\n        delayTimeAfter: () => number;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    /**\n     * Ensure writes to a delay storage\n     * are still correctly run in order.\n     */\n    let randomDelayStorageWriteQueue: Promise<any> = PROMISE_RESOLVE_TRUE;\n\n    const retStorage: RxStorage<Internals, InstanceCreationOptions> = {\n        name: 'random-delay-' + input.storage.name,\n        rxdbVersion: RXDB_VERSION,\n        async createStorageInstance(params) {\n            await promiseWait(input.delayTimeBefore());\n            const storageInstance = await input.storage.createStorageInstance(params);\n            await promiseWait(input.delayTimeAfter());\n\n            return {\n                databaseName: storageInstance.databaseName,\n                internals: storageInstance.internals,\n                options: storageInstance.options,\n                schema: storageInstance.schema,\n                collectionName: storageInstance.collectionName,\n                bulkWrite(a, b) {\n                    randomDelayStorageWriteQueue = randomDelayStorageWriteQueue.then(async () => {\n                        await promiseWait(input.delayTimeBefore());\n                        const response = await storageInstance.bulkWrite(a, b);\n                        await promiseWait(input.delayTimeAfter());\n                        return response;\n                    });\n                    const ret = randomDelayStorageWriteQueue;\n                    return ret;\n                },\n                async findDocumentsById(a, b) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.findDocumentsById(a, b);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n                },\n                async query(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.query(a);\n                    return ret;\n                },\n                async count(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.count(a);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async getAttachmentData(a, b, c) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.getAttachmentData(a, b, c);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                getChangedDocumentsSince: !storageInstance.getChangedDocumentsSince ? undefined : async (a, b) => {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await ensureNotFalsy(storageInstance.getChangedDocumentsSince)(a, b);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                changeStream() {\n                    return storageInstance.changeStream();\n                },\n                conflictResultionTasks() {\n                    return storageInstance.conflictResultionTasks();\n                },\n                resolveConflictResultionTask(a) {\n                    return storageInstance.resolveConflictResultionTask(a);\n                },\n                async cleanup(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.cleanup(a);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async close() {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.close();\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async remove() {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.remove();\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n                },\n            };\n\n\n        }\n    };\n    return retStorage;\n}\n"],"mappings":"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","ignoreList":[]}