{"version":3,"file":"utils-hash.js","names":["_ohash","require","jsSha256","input","Promise","resolve","sha256","nativeSha256","data","TextEncoder","encode","hashBuffer","crypto","subtle","digest","hash","Array","prototype","map","call","Uint8Array","x","toString","slice","join","canUseCryptoSubtle","exports","defaultHashSha256","hashStringToNumber","str","nr","len","length","i","charCodeAt"],"sources":["../../../../src/plugins/utils/utils-hash.ts"],"sourcesContent":["import { sha256 } from 'ohash';\nimport type { HashFunction } from '../../types/index.d.ts';\n\n\n/**\n * TODO in the future we should no longer provide a\n * fallback to crypto.subtle.digest.\n * Instead users without crypto.subtle.digest support, should have to provide their own\n * hash function.\n */\nexport function jsSha256(input: string) {\n    return Promise.resolve(sha256(input));\n}\n\nexport async function nativeSha256(input: string) {\n    const data = new TextEncoder().encode(input);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n    /**\n     * @link https://jameshfisher.com/2017/10/30/web-cryptography-api-hello-world/\n     */\n    const hash = Array.prototype.map.call(\n        new Uint8Array(hashBuffer),\n        x => (('00' + x.toString(16)).slice(-2))\n    ).join('');\n    return hash;\n}\n\n\nexport const canUseCryptoSubtle = typeof crypto !== 'undefined' &&\n    typeof crypto.subtle !== 'undefined' &&\n    typeof crypto.subtle.digest === 'function';\n\n/**\n * Default hash method used to hash\n * strings and do equal comparisons.\n *\n * IMPORTANT: Changing the default hashing method\n * requires a BREAKING change!\n */\n\nexport const defaultHashSha256: HashFunction = canUseCryptoSubtle ? nativeSha256 : jsSha256;\n\n\nexport function hashStringToNumber(str: string): number {\n    let nr = 0;\n    const len = str.length;\n    for (let i = 0; i < len; i++) {\n        nr = nr + str.charCodeAt(i);\n        nr |= 0; // Convert to 32bit integer, improves performance\n    }\n    return nr;\n}\n"],"mappings":";;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,QAAQA,CAACC,KAAa,EAAE;EACpC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAAC,aAAM,EAACH,KAAK,CAAC,CAAC;AACzC;AAEO,eAAeI,YAAYA,CAACJ,KAAa,EAAE;EAC9C,IAAMK,IAAI,GAAG,IAAIC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACP,KAAK,CAAC;EAC5C,IAAMQ,UAAU,GAAG,MAAMC,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC,SAAS,EAAEN,IAAI,CAAC;EAC9D;AACJ;AACA;EACI,IAAMO,IAAI,GAAGC,KAAK,CAACC,SAAS,CAACC,GAAG,CAACC,IAAI,CACjC,IAAIC,UAAU,CAACT,UAAU,CAAC,EAC1BU,CAAC,IAAK,CAAC,IAAI,GAAGA,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,EAAEC,KAAK,CAAC,CAAC,CAAC,CAC1C,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACV,OAAOT,IAAI;AACf;AAGO,IAAMU,kBAAkB,GAAAC,OAAA,CAAAD,kBAAA,GAAG,OAAOb,MAAM,KAAK,WAAW,IAC3D,OAAOA,MAAM,CAACC,MAAM,KAAK,WAAW,IACpC,OAAOD,MAAM,CAACC,MAAM,CAACC,MAAM,KAAK,UAAU;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,IAAMa,iBAA+B,GAAAD,OAAA,CAAAC,iBAAA,GAAGF,kBAAkB,GAAGlB,YAAY,GAAGL,QAAQ;AAGpF,SAAS0B,kBAAkBA,CAACC,GAAW,EAAU;EACpD,IAAIC,EAAE,GAAG,CAAC;EACV,IAAMC,GAAG,GAAGF,GAAG,CAACG,MAAM;EACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;IAC1BH,EAAE,GAAGA,EAAE,GAAGD,GAAG,CAACK,UAAU,CAACD,CAAC,CAAC;IAC3BH,EAAE,IAAI,CAAC,CAAC,CAAC;EACb;EACA,OAAOA,EAAE;AACb","ignoreList":[]}