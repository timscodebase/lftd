import { CustomError } from './CustomError';
import { CustomErrorConstructor } from './CustomErrorConstructor';
import { error, Result, value } from './Result';
declare const HydratingResultFailed_base: CustomErrorConstructor<any, "HydratingResultFailed">;
declare class HydratingResultFailed extends HydratingResultFailed_base {
}
declare const hydrateResult: <TValue, TError extends Error, TPotentialCustomErrorNames extends string = string>({ rawResult, potentialErrorConstructors }: {
    rawResult: {
        value: TValue;
    } | {
        error: TError;
    };
    potentialErrorConstructors?: CustomErrorConstructor<TPotentialCustomErrorNames, string>[] | undefined;
}) => Result<Result<TValue, TError | CustomError<TPotentialCustomErrorNames, string>>, HydratingResultFailed>;
export { hydrateResult };
