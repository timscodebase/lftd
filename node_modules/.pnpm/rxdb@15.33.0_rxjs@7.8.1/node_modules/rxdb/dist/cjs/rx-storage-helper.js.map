{"version":3,"file":"rx-storage-helper.js","names":["_overwritable","require","_rxError","_rxSchemaHelper","_index3","_rxjs","_rxQuery","_rxQueryHelper","_hooks","INTERNAL_STORAGE_NAME","exports","RX_DATABASE_LOCAL_DOCS_STORAGE_NAME","getSingleDocument","storageInstance","documentId","results","findDocumentsById","doc","undefined","writeSingle","instance","writeRow","context","writeResult","bulkWrite","error","length","primaryPath","getPrimaryFieldOfPrimaryKey","schema","primaryKey","success","getWrittenDocumentsFromBulkWriteResponse","ret","observeSingle","firstFindPromise","changeStream","pipe","map","evBulk","events","find","ev","filter","Promise","resolve","ensureNotFalsy","documentData","startWith","switchMap","v","stackCheckpoints","checkpoints","Object","assign","throwIfIsStorageWriteError","collection","writeData","status","newRxError","name","id","writeError","data","categorizeBulkWriteRows","docsInDb","bulkWriteRows","onInsert","onUpdate","hasAttachments","attachments","bulkInsertDocs","bulkUpdateDocs","errors","eventBulkId","randomCouchString","eventBulk","checkpoint","startTime","now","endTime","eventBulkEvents","attachmentsAdd","attachmentsRemove","attachmentsUpdate","hasDocsInDb","size","newestRow","rowAmount","_loop","rowId","document","previous","docId","documentDeleted","_deleted","previousDeleted","documentInDb","get","attachmentError","insertedIsDeleted","entries","_attachments","forEach","attachmentId","attachmentData","isError","push","digest","stripAttachmentsDataFromRow","event","operation","stripAttachmentsDataFromDocument","previousDocumentData","revInDb","_rev","err","updatedRow","keys","previousAttachmentData","newDigest","eventDocumentData","previousEventDocumentData","args","getAttachmentSize","attachmentBase64String","atob","attachmentWriteDataToNormalData","type","useDoc","flatClone","flatCloneDocWithMeta","_meta","BULK_WRITE_SUCCESS_MAP","WeakMap","getWrappedStorageInstance","database","rxJsonSchema","overwritable","deepFreezeWhenDevMode","originalStorageInstance","internals","collectionName","databaseName","options","rows","databaseToken","token","toStorageWriteRows","Array","time","index","lwt","createRevision","runPluginHooks","lockedRun","then","useWriteResult","successArray","set","reInsertErrors","reInserts","subResult","appendToArray","subSuccess","query","preparedQuery","count","ids","deleted","getAttachmentData","getChangedDocumentsSince","limit","cleanup","minDeletedTime","remove","storageInstances","delete","close","conflictResultionTasks","resolveConflictResultionTask","taskSolution","output","isEqual","getDefaultRxDocumentMeta","getDefaultRevision","add","ensureRxStorageInstanceParamsAreCorrect","params","keyCompression","hasEncryption","compression","jsonSchema","encrypted","getChangedDocumentsSinceQuery","sinceLwt","RX_META_LWT_MINIMUM","sinceId","normalizeMangoQuery","selector","$or","$gt","$eq","$gte","sort","skip","prepareQuery","result","documents","lastDoc","lastOfArray","writeRows","response","fromMap","errorIds","Set","has","randomDelayStorage","input","randomDelayStorageWriteQueue","PROMISE_RESOLVE_TRUE","retStorage","storage","rxdbVersion","RXDB_VERSION","createStorageInstance","promiseWait","delayTimeBefore","delayTimeAfter","a","b","c"],"sources":["../../src/rx-storage-helper.ts"],"sourcesContent":["/**\n * Helper functions for accessing the RxStorage instances.\n */\n\nimport { overwritable } from './overwritable.ts';\nimport { newRxError } from './rx-error.ts';\nimport {\n    getPrimaryFieldOfPrimaryKey\n} from './rx-schema-helper.ts';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowProcessed,\n    CategorizeBulkWriteRowsOutput,\n    EventBulk,\n    RxAttachmentData,\n    RxAttachmentWriteData,\n    RxCollection,\n    RxDatabase,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxJsonSchema,\n    RxStorageWriteError,\n    RxStorageChangeEvent,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams,\n    StringKeys,\n    RxStorageWriteErrorConflict,\n    RxStorageWriteErrorAttachment,\n    RxStorage,\n    RxStorageDefaultCheckpoint,\n    FilledMangoQuery,\n    RxStorageBulkWriteResponse\n} from './types/index.d.ts';\nimport {\n    PROMISE_RESOLVE_TRUE,\n    RXDB_VERSION,\n    RX_META_LWT_MINIMUM,\n    appendToArray,\n    createRevision,\n    ensureNotFalsy,\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    lastOfArray,\n    now,\n    promiseWait,\n    randomCouchString\n} from './plugins/utils/index.ts';\nimport { Observable, filter, map, startWith, switchMap } from 'rxjs';\nimport { prepareQuery } from './rx-query.ts';\nimport { normalizeMangoQuery } from './rx-query-helper.ts';\nimport { runPluginHooks } from './hooks.ts';\n\nexport const INTERNAL_STORAGE_NAME = '_rxdb_internal';\nexport const RX_DATABASE_LOCAL_DOCS_STORAGE_NAME = 'rxdatabase_storage_local';\n\nexport async function getSingleDocument<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Promise<RxDocumentData<RxDocType> | undefined> {\n    const results = await storageInstance.findDocumentsById([documentId], false);\n    const doc = results[0];\n    if (doc) {\n        return doc;\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Writes a single document,\n * throws RxStorageBulkWriteError on failure\n */\nexport async function writeSingle<RxDocType>(\n    instance: RxStorageInstance<RxDocType, any, any>,\n    writeRow: BulkWriteRow<RxDocType>,\n    context: string\n): Promise<RxDocumentData<RxDocType>> {\n    const writeResult = await instance.bulkWrite(\n        [writeRow],\n        context\n    );\n    if (writeResult.error.length > 0) {\n        const error = writeResult.error[0];\n        throw error;\n    } else {\n        const primaryPath = getPrimaryFieldOfPrimaryKey(instance.schema.primaryKey);\n        const success = getWrittenDocumentsFromBulkWriteResponse(primaryPath, [writeRow], writeResult);\n        const ret = success[0];\n        return ret;\n    }\n}\n\n/**\n * Observe the plain document data of a single document.\n * Do not forget to unsubscribe.\n */\nexport function observeSingle<RxDocType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any>,\n    documentId: string\n): Observable<RxDocumentData<RxDocType>> {\n    const firstFindPromise = getSingleDocument(storageInstance, documentId);\n    const ret = storageInstance\n        .changeStream()\n        .pipe(\n            map(evBulk => evBulk.events.find(ev => ev.documentId === documentId)),\n            filter(ev => !!ev),\n            map(ev => Promise.resolve(ensureNotFalsy(ev).documentData)),\n            startWith(firstFindPromise),\n            switchMap(v => v),\n            filter(v => !!v)\n        ) as any;\n    return ret;\n}\n\n/**\n * Checkpoints must be stackable over another.\n * This is required form some RxStorage implementations\n * like the sharding plugin, where a checkpoint only represents\n * the document state from some, but not all shards.\n */\nexport function stackCheckpoints<CheckpointType>(\n    checkpoints: CheckpointType[]\n): CheckpointType {\n    return Object.assign(\n        {},\n        ...checkpoints\n    );\n}\n\nexport function throwIfIsStorageWriteError<RxDocType>(\n    collection: RxCollection<RxDocType, any, any>,\n    documentId: string,\n    writeData: RxDocumentWriteData<RxDocType> | RxDocType,\n    error: RxStorageWriteError<RxDocType> | undefined\n) {\n    if (error) {\n        if (error.status === 409) {\n            throw newRxError('CONFLICT', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else if (error.status === 422) {\n            throw newRxError('VD2', {\n                collection: collection.name,\n                id: documentId,\n                writeError: error,\n                data: writeData\n            });\n        } else {\n            throw error;\n        }\n    }\n}\n\n\n/**\n * Analyzes a list of BulkWriteRows and determines\n * which documents must be inserted, updated or deleted\n * and which events must be emitted and which documents cause a conflict\n * and must not be written.\n * Used as helper inside of some RxStorage implementations.\n * @hotPath The performance of this function is critical\n */\nexport function categorizeBulkWriteRows<RxDocType>(\n    storageInstance: RxStorageInstance<any, any, any>,\n    primaryPath: StringKeys<RxDocType>,\n    /**\n     * Current state of the documents\n     * inside of the storage. Used to determine\n     * which writes cause conflicts.\n     * This must be a Map for better performance.\n     */\n    docsInDb: Map<RxDocumentData<RxDocType>[StringKeys<RxDocType>] | string, RxDocumentData<RxDocType>>,\n    /**\n     * The write rows that are passed to\n     * RxStorageInstance().bulkWrite().\n     */\n    bulkWriteRows: BulkWriteRow<RxDocType>[],\n    context: string,\n    /**\n     * Used by some storages for better performance.\n     * For example when get-by-id and insert/update can run in parallel.\n     */\n    onInsert?: (docData: RxDocumentData<RxDocType>) => void,\n    onUpdate?: (docData: RxDocumentData<RxDocType>) => void\n): CategorizeBulkWriteRowsOutput<RxDocType> {\n    const hasAttachments = !!storageInstance.schema.attachments;\n    const bulkInsertDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const bulkUpdateDocs: BulkWriteRowProcessed<RxDocType>[] = [];\n    const errors: RxStorageWriteError<RxDocType>[] = [];\n    const eventBulkId = randomCouchString(10);\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>, any> = {\n        id: eventBulkId,\n        events: [],\n        checkpoint: null,\n        context,\n        startTime: now(),\n        endTime: 0\n    };\n    const eventBulkEvents = eventBulk.events;\n\n    const attachmentsAdd: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n    const attachmentsRemove: {\n        documentId: string;\n        attachmentId: string;\n        digest: string;\n    }[] = [];\n    const attachmentsUpdate: {\n        documentId: string;\n        attachmentId: string;\n        attachmentData: RxAttachmentWriteData;\n        digest: string;\n    }[] = [];\n\n    const hasDocsInDb = docsInDb.size > 0;\n    let newestRow: BulkWriteRowProcessed<RxDocType> | undefined;\n\n    /**\n     * @performance is really important in this loop!\n     */\n    const rowAmount = bulkWriteRows.length;\n    for (let rowId = 0; rowId < rowAmount; rowId++) {\n        const writeRow = bulkWriteRows[rowId];\n\n        // use these variables to have less property accesses\n        const document = writeRow.document;\n        const previous = writeRow.previous;\n        const docId = document[primaryPath] as string;\n        const documentDeleted = document._deleted;\n        const previousDeleted = previous && previous._deleted;\n\n        let documentInDb: RxDocumentData<RxDocType> | undefined = undefined as any;\n        if (hasDocsInDb) {\n            documentInDb = docsInDb.get(docId);\n        }\n        let attachmentError: RxStorageWriteErrorAttachment<RxDocType> | undefined;\n\n        if (!documentInDb) {\n            /**\n             * It is possible to insert already deleted documents,\n             * this can happen on replication.\n             */\n            const insertedIsDeleted = documentDeleted ? true : false;\n            if (hasAttachments) {\n                Object\n                    .entries(document._attachments)\n                    .forEach(([attachmentId, attachmentData]) => {\n                        if (\n                            !(attachmentData as RxAttachmentWriteData).data\n                        ) {\n                            attachmentError = {\n                                documentId: docId,\n                                isError: true,\n                                status: 510,\n                                writeRow,\n                                attachmentId\n                            };\n                            errors.push(attachmentError);\n                        } else {\n                            attachmentsAdd.push({\n                                documentId: docId,\n                                attachmentId,\n                                attachmentData: attachmentData as any,\n                                digest: attachmentData.digest\n                            });\n                        }\n                    });\n            }\n            if (!attachmentError) {\n                if (hasAttachments) {\n                    bulkInsertDocs.push(stripAttachmentsDataFromRow(writeRow));\n                    if (onInsert) {\n                        onInsert(document);\n                    }\n                } else {\n                    bulkInsertDocs.push(writeRow as any);\n                    if (onInsert) {\n                        onInsert(document);\n                    }\n                }\n\n                newestRow = writeRow as any;\n            }\n\n            if (!insertedIsDeleted) {\n                const event = {\n                    documentId: docId,\n                    operation: 'INSERT' as const,\n                    documentData: hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any,\n                    previousDocumentData: hasAttachments && previous ? stripAttachmentsDataFromDocument(previous) : previous as any\n                };\n                eventBulkEvents.push(event);\n            }\n        } else {\n            // update existing document\n            const revInDb: string = documentInDb._rev;\n\n            /**\n             * Check for conflict\n             */\n            if (\n                (\n                    !previous\n                ) ||\n                (\n                    !!previous &&\n                    revInDb !== previous._rev\n                )\n            ) {\n                // is conflict error\n                const err: RxStorageWriteError<RxDocType> = {\n                    isError: true,\n                    status: 409,\n                    documentId: docId,\n                    writeRow: writeRow,\n                    documentInDb\n                };\n                errors.push(err);\n                continue;\n            }\n\n            // handle attachments data\n\n            const updatedRow: BulkWriteRowProcessed<RxDocType> = hasAttachments ? stripAttachmentsDataFromRow(writeRow) : writeRow as any;\n            if (hasAttachments) {\n                if (documentDeleted) {\n                    /**\n                     * Deleted documents must have cleared all their attachments.\n                     */\n                    if (previous) {\n                        Object\n                            .keys(previous._attachments)\n                            .forEach(attachmentId => {\n                                attachmentsRemove.push({\n                                    documentId: docId,\n                                    attachmentId,\n                                    digest: ensureNotFalsy(previous)._attachments[attachmentId].digest\n                                });\n                            });\n                    }\n                } else {\n                    // first check for errors\n                    Object\n                        .entries(document._attachments)\n                        .find(([attachmentId, attachmentData]) => {\n                            const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\n                            if (\n                                !previousAttachmentData &&\n                                !(attachmentData as RxAttachmentWriteData).data\n                            ) {\n                                attachmentError = {\n                                    documentId: docId,\n                                    documentInDb: documentInDb as any,\n                                    isError: true,\n                                    status: 510,\n                                    writeRow,\n                                    attachmentId\n                                };\n                            }\n                            return true;\n                        });\n                    if (!attachmentError) {\n                        Object\n                            .entries(document._attachments)\n                            .forEach(([attachmentId, attachmentData]) => {\n                                const previousAttachmentData = previous ? previous._attachments[attachmentId] : undefined;\n                                if (!previousAttachmentData) {\n                                    attachmentsAdd.push({\n                                        documentId: docId,\n                                        attachmentId,\n                                        attachmentData: attachmentData as any,\n                                        digest: attachmentData.digest\n                                    });\n                                } else {\n                                    const newDigest = updatedRow.document._attachments[attachmentId].digest;\n                                    if (\n                                        (attachmentData as RxAttachmentWriteData).data &&\n                                        /**\n                                         * Performance shortcut,\n                                         * do not update the attachment data if it did not change.\n                                         */\n                                        previousAttachmentData.digest !== newDigest\n                                    ) {\n                                        attachmentsUpdate.push({\n                                            documentId: docId,\n                                            attachmentId,\n                                            attachmentData: attachmentData as RxAttachmentWriteData,\n                                            digest: attachmentData.digest\n                                        });\n                                    }\n                                }\n                            });\n                    }\n                }\n            }\n\n            if (attachmentError) {\n                errors.push(attachmentError);\n            } else {\n                if (hasAttachments) {\n                    bulkUpdateDocs.push(stripAttachmentsDataFromRow(updatedRow));\n                    if (onUpdate) {\n                        onUpdate(document);\n                    }\n                } else {\n                    bulkUpdateDocs.push(updatedRow);\n                    if (onUpdate) {\n                        onUpdate(document);\n                    }\n                }\n                newestRow = updatedRow as any;\n            }\n\n            let eventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let previousEventDocumentData: RxDocumentData<RxDocType> | undefined = null as any;\n            let operation: 'INSERT' | 'UPDATE' | 'DELETE' = null as any;\n\n            if (previousDeleted && !documentDeleted) {\n                operation = 'INSERT';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\n            } else if (previous && !previousDeleted && !documentDeleted) {\n                operation = 'UPDATE';\n                eventDocumentData = hasAttachments ? stripAttachmentsDataFromDocument(document) : document as any;\n                previousEventDocumentData = previous;\n            } else if (documentDeleted) {\n                operation = 'DELETE';\n                eventDocumentData = ensureNotFalsy(document) as any;\n                previousEventDocumentData = previous;\n            } else {\n                throw newRxError('SNH', { args: { writeRow } });\n            }\n\n            const event = {\n                documentId: docId,\n                documentData: eventDocumentData as RxDocumentData<RxDocType>,\n                previousDocumentData: previousEventDocumentData,\n                operation: operation\n            };\n            eventBulkEvents.push(event);\n        }\n    }\n\n    return {\n        bulkInsertDocs,\n        bulkUpdateDocs,\n        newestRow,\n        errors,\n        eventBulk,\n        attachmentsAdd,\n        attachmentsRemove,\n        attachmentsUpdate\n    };\n}\n\nexport function stripAttachmentsDataFromRow<RxDocType>(writeRow: BulkWriteRow<RxDocType>): BulkWriteRowProcessed<RxDocType> {\n    return {\n        previous: writeRow.previous,\n        document: stripAttachmentsDataFromDocument(writeRow.document)\n    };\n}\n\nexport function getAttachmentSize(\n    attachmentBase64String: string\n): number {\n    return atob(attachmentBase64String).length;\n}\n\n/**\n * Used in custom RxStorage implementations.\n */\nexport function attachmentWriteDataToNormalData(writeData: RxAttachmentData | RxAttachmentWriteData): RxAttachmentData {\n    const data = (writeData as RxAttachmentWriteData).data;\n    if (!data) {\n        return writeData as any;\n    }\n    const ret: RxAttachmentData = {\n        length: getAttachmentSize(data),\n        digest: writeData.digest,\n        type: writeData.type\n    };\n    return ret;\n}\n\nexport function stripAttachmentsDataFromDocument<RxDocType>(doc: RxDocumentWriteData<RxDocType>): RxDocumentData<RxDocType> {\n    if (!doc._attachments || Object.keys(doc._attachments).length === 0) {\n        return doc;\n    }\n\n    const useDoc: RxDocumentData<RxDocType> = flatClone(doc) as any;\n    useDoc._attachments = {};\n    Object\n        .entries(doc._attachments)\n        .forEach(([attachmentId, attachmentData]) => {\n            useDoc._attachments[attachmentId] = attachmentWriteDataToNormalData(attachmentData);\n        });\n    return useDoc;\n}\n\n/**\n * Flat clone the document data\n * and also the _meta field.\n * Used many times when we want to change the meta\n * during replication etc.\n */\nexport function flatCloneDocWithMeta<RxDocType>(\n    doc: RxDocumentData<RxDocType>\n): RxDocumentData<RxDocType> {\n    return Object.assign(\n        {},\n        doc,\n        {\n            _meta: flatClone(doc._meta)\n        }\n    );\n}\n\nexport type WrappedRxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions> = RxStorageInstance<RxDocumentType, any, InstanceCreationOptions> & {\n    originalStorageInstance: RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>;\n};\n\n\nconst BULK_WRITE_SUCCESS_MAP = new WeakMap<RxStorageBulkWriteResponse<any>, RxDocumentData<any>>();\n\n/**\n * Wraps the normal storageInstance of a RxCollection\n * to ensure that all access is properly using the hooks\n * and other data transformations and also ensure that database.lockedRun()\n * is used properly.\n */\nexport function getWrappedStorageInstance<\n    RxDocType,\n    Internals,\n    InstanceCreationOptions,\n    CheckpointType\n>(\n    database: RxDatabase<{}, Internals, InstanceCreationOptions, any>,\n    storageInstance: RxStorageInstance<RxDocType, Internals, InstanceCreationOptions, CheckpointType>,\n    /**\n     * The original RxJsonSchema\n     * before it was mutated by hooks.\n     */\n    rxJsonSchema: RxJsonSchema<RxDocumentData<RxDocType>>\n): WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> {\n    overwritable.deepFreezeWhenDevMode(rxJsonSchema);\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\n\n    const ret: WrappedRxStorageInstance<RxDocType, Internals, InstanceCreationOptions> = {\n        originalStorageInstance: storageInstance,\n        schema: storageInstance.schema,\n        internals: storageInstance.internals,\n        collectionName: storageInstance.collectionName,\n        databaseName: storageInstance.databaseName,\n        options: storageInstance.options,\n        bulkWrite(\n            rows: BulkWriteRow<RxDocType>[],\n            context: string\n        ) {\n            const databaseToken = database.token;\n            const toStorageWriteRows: BulkWriteRow<RxDocType>[] = new Array(rows.length);\n            /**\n             * Use the same timestamp for all docs of this rows-set.\n             * This improves performance because calling Date.now() inside of the now() function\n             * is too costly.\n             */\n            const time = now();\n            for (let index = 0; index < rows.length; index++) {\n                const writeRow = rows[index];\n                const document = flatCloneDocWithMeta(writeRow.document);\n                document._meta.lwt = time;\n\n                /**\n                 * Yes we really want to set the revision here.\n                 * If you make a plugin that relies on having its own revision\n                 * stored into the storage, use this.originalStorageInstance.bulkWrite() instead.\n                 */\n                const previous = writeRow.previous;\n                document._rev = createRevision(\n                    databaseToken,\n                    previous\n                );\n                toStorageWriteRows[index] = {\n                    document,\n                    previous\n                };\n            }\n\n            runPluginHooks('preStorageWrite', {\n                storageInstance: this.originalStorageInstance,\n                rows: toStorageWriteRows\n            });\n\n            return database.lockedRun(\n                () => storageInstance.bulkWrite(\n                    toStorageWriteRows,\n                    context\n                )\n            )\n                /**\n                 * The RxStorageInstance MUST NOT allow to insert already _deleted documents,\n                 * without sending the previous document version.\n                 * But for better developer experience, RxDB does allow to re-insert deleted documents.\n                 * We do this by automatically fixing the conflict errors for that case\n                 * by running another bulkWrite() and merging the results.\n                 * @link https://github.com/pubkey/rxdb/pull/3839\n                 */\n                .then(writeResult => {\n                    const useWriteResult: typeof writeResult = {\n                        error: []\n                    };\n\n                    /**\n                     * TODO do we really have to build up the successArray\n                     * here directly? Maybe we only need it when it is really accessed.\n                     */\n                    const successArray = getWrittenDocumentsFromBulkWriteResponse(\n                        primaryPath,\n                        toStorageWriteRows,\n                        writeResult\n                    );\n                    BULK_WRITE_SUCCESS_MAP.set(useWriteResult, successArray);\n\n                    const reInsertErrors: RxStorageWriteErrorConflict<RxDocType>[] = writeResult.error.length === 0\n                        ? []\n                        : writeResult.error\n                            .filter((error) => {\n                                if (\n                                    error.status === 409 &&\n                                    !error.writeRow.previous &&\n                                    !error.writeRow.document._deleted &&\n                                    ensureNotFalsy(error.documentInDb)._deleted\n                                ) {\n                                    return true;\n                                }\n\n                                // add the \"normal\" errors to the parent error array.\n                                useWriteResult.error.push(error);\n                                return false;\n                            }) as any;\n                    if (reInsertErrors.length > 0) {\n                        const reInserts: BulkWriteRow<RxDocType>[] = reInsertErrors\n                            .map((error) => {\n                                return {\n                                    previous: error.documentInDb,\n                                    document: Object.assign(\n                                        {},\n                                        error.writeRow.document,\n                                        {\n                                            _rev: createRevision(\n                                                database.token,\n                                                error.documentInDb\n                                            )\n                                        }\n                                    )\n                                };\n                            });\n\n                        return database.lockedRun(\n                            () => storageInstance.bulkWrite(\n                                reInserts,\n                                context\n                            )\n                        ).then(subResult => {\n                            appendToArray(useWriteResult.error, subResult.error);\n\n                            const subSuccess = getWrittenDocumentsFromBulkWriteResponse(\n                                primaryPath,\n                                reInserts,\n                                subResult\n                            );\n                            appendToArray(successArray, subSuccess);\n\n                            return useWriteResult;\n                        });\n                    }\n                    return useWriteResult;\n                });\n        },\n        query(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.query(preparedQuery)\n            );\n        },\n        count(preparedQuery) {\n            return database.lockedRun(\n                () => storageInstance.count(preparedQuery)\n            );\n        },\n        findDocumentsById(ids, deleted) {\n            return database.lockedRun(\n                () => storageInstance.findDocumentsById(ids, deleted)\n            );\n        },\n        getAttachmentData(\n            documentId: string,\n            attachmentId: string,\n            digest: string\n        ) {\n            return database.lockedRun(\n                () => storageInstance.getAttachmentData(documentId, attachmentId, digest)\n            );\n        },\n        getChangedDocumentsSince: !storageInstance.getChangedDocumentsSince ? undefined : (limit: number, checkpoint?: any) => {\n            return database.lockedRun(\n                () => ((storageInstance as any).getChangedDocumentsSince)(ensureNotFalsy(limit), checkpoint)\n            );\n        },\n        cleanup(minDeletedTime: number) {\n            return database.lockedRun(\n                () => storageInstance.cleanup(minDeletedTime)\n            );\n        },\n        remove() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.remove()\n            );\n        },\n        close() {\n            database.storageInstances.delete(ret);\n            return database.lockedRun(\n                () => storageInstance.close()\n            );\n        },\n        changeStream() {\n            return storageInstance.changeStream();\n        },\n        conflictResultionTasks() {\n            return storageInstance.conflictResultionTasks();\n        },\n        resolveConflictResultionTask(taskSolution) {\n            if (taskSolution.output.isEqual) {\n                return storageInstance.resolveConflictResultionTask(taskSolution);\n            }\n\n            const doc = Object.assign(\n                {},\n                taskSolution.output.documentData,\n                {\n                    _meta: getDefaultRxDocumentMeta(),\n                    _rev: getDefaultRevision(),\n                    _attachments: {}\n                }\n            );\n\n            const documentData = flatClone(doc);\n            delete (documentData as any)._meta;\n            delete (documentData as any)._rev;\n            delete (documentData as any)._attachments;\n\n            return storageInstance.resolveConflictResultionTask({\n                id: taskSolution.id,\n                output: {\n                    isEqual: false,\n                    documentData\n                }\n            });\n        }\n    };\n\n    database.storageInstances.add(ret);\n    return ret;\n}\n\n/**\n * Each RxStorage implementation should\n * run this method at the first step of createStorageInstance()\n * to ensure that the configuration is correct.\n */\nexport function ensureRxStorageInstanceParamsAreCorrect(\n    params: RxStorageInstanceCreationParams<any, any>\n) {\n    if (params.schema.keyCompression) {\n        throw newRxError('UT5', { args: { params } });\n    }\n    if (hasEncryption(params.schema)) {\n        throw newRxError('UT6', { args: { params } });\n    }\n    if (\n        params.schema.attachments &&\n        params.schema.attachments.compression\n    ) {\n        throw newRxError('UT7', { args: { params } });\n    }\n}\n\nexport function hasEncryption(jsonSchema: RxJsonSchema<any>): boolean {\n    if (\n        (!!jsonSchema.encrypted && jsonSchema.encrypted.length > 0) ||\n        (jsonSchema.attachments && jsonSchema.attachments.encrypted)\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport function getChangedDocumentsSinceQuery<RxDocType, CheckpointType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any, CheckpointType>,\n    limit: number,\n    checkpoint?: CheckpointType\n): FilledMangoQuery<RxDocType> {\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\n    const sinceLwt = checkpoint ? (checkpoint as unknown as RxStorageDefaultCheckpoint).lwt : RX_META_LWT_MINIMUM;\n    const sinceId = checkpoint ? (checkpoint as unknown as RxStorageDefaultCheckpoint).id : '';\n    return normalizeMangoQuery(storageInstance.schema, {\n        selector: {\n            $or: [\n                {\n                    '_meta.lwt': {\n                        $gt: sinceLwt\n                    }\n                },\n                {\n                    '_meta.lwt': {\n                        $eq: sinceLwt\n                    },\n                    [primaryPath]: {\n                        $gt: checkpoint ? sinceId : ''\n                    }\n                }\n            ],\n            // add this hint for better index usage\n            '_meta.lwt': {\n                $gte: sinceLwt\n            }\n        } as any,\n        sort: [\n            { '_meta.lwt': 'asc' },\n            { [primaryPath]: 'asc' }\n        ] as any,\n        skip: 0,\n        limit,\n        /**\n         * DO NOT SET A SPECIFIC INDEX HERE!\n         * The query might be modified by some plugin\n         * before sending it to the storage.\n         * We can be sure that in the end the query planner\n         * will find the best index.\n         */\n        // index: ['_meta.lwt', primaryPath]\n    });\n}\n\nexport async function getChangedDocumentsSince<RxDocType, CheckpointType>(\n    storageInstance: RxStorageInstance<RxDocType, any, any, CheckpointType>,\n    limit: number,\n    checkpoint?: CheckpointType\n): Promise<{\n    documents: RxDocumentData<RxDocType>[];\n    /**\n     * The checkpoint contains data so that another\n     * call to getChangedDocumentsSince() will continue\n     * from exactly the last document that was returned before.\n     */\n    checkpoint: CheckpointType;\n}> {\n    if (storageInstance.getChangedDocumentsSince) {\n        return storageInstance.getChangedDocumentsSince(limit, checkpoint);\n    }\n\n    const primaryPath = getPrimaryFieldOfPrimaryKey(storageInstance.schema.primaryKey);\n    const query = prepareQuery<RxDocumentData<any>>(\n        storageInstance.schema,\n        getChangedDocumentsSinceQuery(\n            storageInstance,\n            limit,\n            checkpoint\n        )\n    );\n\n    const result = await storageInstance.query(query);\n    const documents = result.documents;\n    const lastDoc = lastOfArray(documents);\n\n    return {\n        documents: documents,\n        checkpoint: lastDoc ? {\n            id: (lastDoc as any)[primaryPath],\n            lwt: lastDoc._meta.lwt\n        } as any : checkpoint ? checkpoint : {\n            id: '',\n            lwt: 0\n        }\n    };\n}\n\n\nexport function getWrittenDocumentsFromBulkWriteResponse<RxDocType>(\n    primaryPath: string,\n    writeRows: BulkWriteRow<RxDocType>[],\n    response: RxStorageBulkWriteResponse<RxDocType>\n): RxDocumentData<RxDocType>[] {\n    const fromMap = BULK_WRITE_SUCCESS_MAP.get(response);\n    if (fromMap) {\n        return fromMap;\n    }\n\n    const ret: RxDocumentData<RxDocType>[] = [];\n    if (response.error.length > 0) {\n        const errorIds = new Set();\n        for (let index = 0; index < response.error.length; index++) {\n            const error = response.error[index];\n            errorIds.add(error.documentId);\n        }\n\n        for (let index = 0; index < writeRows.length; index++) {\n            const doc = writeRows[index].document;\n            if (!errorIds.has((doc as any)[primaryPath])) {\n                ret.push(stripAttachmentsDataFromDocument(doc));\n            }\n        }\n    } else {\n        // pre-set array size for better performance\n        ret.length = writeRows.length - response.error.length;\n        for (let index = 0; index < writeRows.length; index++) {\n            const doc = writeRows[index].document;\n            ret[index] = stripAttachmentsDataFromDocument(doc);\n        }\n    }\n\n    return ret;\n}\n\n\n/**\n * Wraps the storage and simluates\n * delays. Mostly used in tests.\n */\nexport function randomDelayStorage<Internals, InstanceCreationOptions>(\n    input: {\n        storage: RxStorage<Internals, InstanceCreationOptions>;\n        delayTimeBefore: () => number;\n        delayTimeAfter: () => number;\n    }\n): RxStorage<Internals, InstanceCreationOptions> {\n    /**\n     * Ensure writes to a delay storage\n     * are still correctly run in order.\n     */\n    let randomDelayStorageWriteQueue: Promise<any> = PROMISE_RESOLVE_TRUE;\n\n    const retStorage: RxStorage<Internals, InstanceCreationOptions> = {\n        name: 'random-delay-' + input.storage.name,\n        rxdbVersion: RXDB_VERSION,\n        async createStorageInstance(params) {\n            await promiseWait(input.delayTimeBefore());\n            const storageInstance = await input.storage.createStorageInstance(params);\n            await promiseWait(input.delayTimeAfter());\n\n            return {\n                databaseName: storageInstance.databaseName,\n                internals: storageInstance.internals,\n                options: storageInstance.options,\n                schema: storageInstance.schema,\n                collectionName: storageInstance.collectionName,\n                bulkWrite(a, b) {\n                    randomDelayStorageWriteQueue = randomDelayStorageWriteQueue.then(async () => {\n                        await promiseWait(input.delayTimeBefore());\n                        const response = await storageInstance.bulkWrite(a, b);\n                        await promiseWait(input.delayTimeAfter());\n                        return response;\n                    });\n                    const ret = randomDelayStorageWriteQueue;\n                    return ret;\n                },\n                async findDocumentsById(a, b) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.findDocumentsById(a, b);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n                },\n                async query(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.query(a);\n                    return ret;\n                },\n                async count(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.count(a);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async getAttachmentData(a, b, c) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.getAttachmentData(a, b, c);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                getChangedDocumentsSince: !storageInstance.getChangedDocumentsSince ? undefined : async (a, b) => {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await ensureNotFalsy(storageInstance.getChangedDocumentsSince)(a, b);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                changeStream() {\n                    return storageInstance.changeStream();\n                },\n                conflictResultionTasks() {\n                    return storageInstance.conflictResultionTasks();\n                },\n                resolveConflictResultionTask(a) {\n                    return storageInstance.resolveConflictResultionTask(a);\n                },\n                async cleanup(a) {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.cleanup(a);\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async close() {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.close();\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n\n                },\n                async remove() {\n                    await promiseWait(input.delayTimeBefore());\n                    const ret = await storageInstance.remove();\n                    await promiseWait(input.delayTimeAfter());\n                    return ret;\n                },\n            };\n\n\n        }\n    };\n    return retStorage;\n}\n"],"mappings":"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","ignoreList":[]}